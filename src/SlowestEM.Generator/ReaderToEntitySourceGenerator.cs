using Microsoft.CodeAnalysis;
using System.Text;

namespace SlowestEM.Generator
{
    [Generator]
    public class ReaderToEntitySourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var finder = context.SyntaxContextReceiver as FindClassReceiver;
            var cList = new StringBuilder();
            foreach (var typeNode in finder.ClassDeclarationSyntaxes)
            {
                var symbol = context.Compilation.GetSemanticModel(typeNode.SyntaxTree)
                    .GetDeclaredSymbol(typeNode);
                if (symbol is INamedTypeSymbol namedType && !namedType.IsAbstract)
                {
                    cList.AppendLine($"// {namedType.ToDisplayString()}");
                }
            }

            var generatorSrc = $@"
// <auto-generated/>
#pragma warning disable 8019 //disable 'unnecessary using directive' warning
using System;

namespace SlowestEM.Generator
{{
    public static partial class EntitiesGenerator
    {{
        public static void Enable()
        {{
            {cList}
        }}
    }}
}}
";

            context.AddSource($"SlowestEM.Generator.EntitiesGenerator.g.cs", generatorSrc);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new FindClassReceiver());
        }
    }
}
