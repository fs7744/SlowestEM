using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SlowestEM.Generator
{
    [Generator]
    public class ReaderToEntitySourceGenerator : ISourceGenerator
    {
        private Dictionary<string,string> supportReaderFieldType = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) 
        { 
            {"string","ReadToString" },
            {"short","ReadToInt16" },
            {"short?","ReadToInt16Nullable" },
            {"ushort","ReadToUInt16" },
            {"ushort?","ReadToUInt16Nullable" },
            {"int","ReadToInt32" },
            {"int?","ReadToInt32Nullable" },
            {"uint","ReadToUInt32" },
            {"uint?","ReadToUInt32Nullable" },
            {"long","ReadToInt64" },
            {"long?","ReadToInt64Nullable" },
            {"ulong","ReadToUInt64" },
            {"ulong?","ReadToUInt64Nullable" },
            {"float","ReadToFloat" },
            {"float?","ReadToFloatNullable" },
            {"double","ReadToDouble" },
            {"double?","ReadToDoubleNullable" },
            {"decimal","ReadToDecimal" },
            {"decimal?","ReadToDecimalNullable" },
            {"bool","ReadToBoolean" },
            {"bool?","ReadToBooleanNullable" },
            {"char","ReadToChar" },
            {"char?","ReadToCharNullable" },
            {"byte","ReadToByte" },
            {"byte?","ReadToByteNullable" },
            {"DateTime","ReadToDateTime" },
            {"DateTime?","ReadToDateTimeNullable" },
        };

        private Dictionary<string, string> supportParamFieldType = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            {"string","DbType.String" },
            {"short","DbType.Int16" },
            {"short?","DbType.Int16" },
            {"ushort","DbType.UInt16" },
            {"ushort?","DbType.UInt16" },
            {"int","DbType.Int32" },
            {"int?","DbType.Int32" },
            {"uint","DbType.UInt32" },
            {"uint?","DbType.UInt32" },
            {"long","DbType.Int64" },
            {"long?","DbType.Int64" },
            {"ulong","DbType.UInt64" },
            {"ulong?","DbType.UInt64" },
            {"float","DbType.Single" },
            {"float?","DbType.Single" },
            {"double","DbType.Double" },
            {"double?","DbType.Double" },
            {"decimal","DbType.Decimal" },
            {"decimal?","DbType.Decimal" },
            {"bool","DbType.Boolean" },
            {"bool?","DbType.Boolean" },
            {"char","DbType.String" },
            {"char?","DbType.String" },
            {"byte","DbType.Byte" },
            {"byte?","DbType.Byte" },
            {"DateTime","DbType.DateTime" },
            {"DateTime?","DbType.DateTime" },
        };
        
        public void Execute(GeneratorExecutionContext context)
        {
            var finder = context.SyntaxContextReceiver as FindClassReceiver;
            var cList = new StringBuilder();
            foreach (var namedType in finder.AllClass(context))
            {
                if (namedType.IsAbstract || namedType.IsGenericType || namedType.IsStatic)
                    continue;
                GenerateClassMapper(context, cList, namedType);
            }

            GenerateEnableFunc(context, cList);
        }

        private void GenerateClassMapper(GeneratorExecutionContext context, StringBuilder cList, INamedTypeSymbol namedType)
        {
            var ps = namedType.GetAllSettableProperties().Where(i => supportReaderFieldType.ContainsKey(i.Type.ToRealTypeDisplayString()) || i.Type.IsEnum()).DistinctByKey(i => i.Name).ToList();
            var rs = namedType.GetAllGettableProperties().Where( i => !i.HasAttribute("NotDbParameterAttribute")).Where(i => supportParamFieldType.ContainsKey(i.Type.ToRealTypeDisplayString()) || i.Type.IsEnum()).DistinctByKey(i => i.Name).ToList();
            var fullName = namedType.ToDisplayString();
            var src = $@"
// <auto-generated/>
#pragma warning disable 8019 //disable 'unnecessary using directive' warning
using System;
using System.Data;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace SlowestEM
{{
    public static partial class {namedType.Name}_Accessors
    {{
        private static Dictionary<int, int[]> tokenCache = new ();

        {GenerateRead(ps, fullName, namedType)}

        {namedType.DeclaredAccessibility.ToDisplayString()} static void CreateParams({(namedType.DeclaredAccessibility == Accessibility.Public ? "this " : "")}IDbCommand command, {fullName} o)
        {{
            var ps = command.Parameters;
            IDbDataParameter p = null;
            {string.Join("", rs.Select(i => $@"
            p = command.CreateParameter();
            p.ParameterName = ""{i.Name}"";
            p.DbType = {(i.Type.IsEnum() ? supportParamFieldType[i.Type.GetEnumUnderlyingType()?.ToRealTypeDisplayString() ?? "string"] :  supportParamFieldType[i.Type.ToRealTypeDisplayString()])};
            p.Direction = ParameterDirection.Input;
            p.Value = {(i.Type.IsNullable() ? $"EntitiesGenerator.AsValue(o.{i.Name})" : $"o.{i.Name}")};
            ps.Add(p);
"))}
        }}
    }}
}}
            ";
            context.AddSource($"{fullName}_Accessors.g.cs", src);
            cList.AppendLine($"DBExtensions.ReaderCache[typeof({fullName})] = {namedType.Name}_Accessors.Read;");
        }

        private string GenerateRead(List<IPropertySymbol> ps, string fullName, INamedTypeSymbol namedType)
        {
            var i = 0;
            var f = new StringBuilder();

            var s = new StringBuilder();
            foreach (var p in ps) 
            {
                if (p.Type.IsEnum())
                {
                    var x = ++i;
                    var y = ++i;
                    f.Append($@"
                    case {StringHashing.NormalizedHash(p.Name)}U:
                        s[i] = type == typeof(string) ? {x} : {y}; 
                        break;
");
                    s.Append($@"
                    case {x}:
                        d.{p.Name} = EntitiesGenerator.ReadToEnumString{(p.Type.IsNullable() ? "Nullable" : "")}<{p.Type.ToNoNullableDisplayString()}>(reader,j);
                        break;
                    case {y}:
                        d.{p.Name} = EntitiesGenerator.ReadToEnum{(p.Type.IsNullable() ? "Nullable" : "")}<{p.Type.ToNoNullableDisplayString()}>(reader,j);
                        break;
");
                }
                else
                {
                    var x = ++i;
                    var y = ++i;
                    f.Append($@"
                    case {StringHashing.NormalizedHash(p.Name)}U:
                        s[i] = type == typeof({p.Type.ToNoNullableDisplayString()}) ? {x} : {y}; 
                        break;
");
                    s.Append($@"
                    case {x}:
                        d.{p.Name} = EntitiesGenerator.{supportReaderFieldType[p.Type.ToRealTypeDisplayString()]}(reader,j);
                        break;
                    case {y}:
                        d.{p.Name} = EntitiesGenerator.{supportReaderFieldType[p.Type.ToRealTypeDisplayString()]}Convert(reader,j);
                        break;
");
                }
                
            }

            return $@"
        {namedType.DeclaredAccessibility.ToDisplayString()} static void GenerateReadTokens({(namedType.DeclaredAccessibility == Accessibility.Public ? "this " : "")}IDataReader reader, Span<int> s)
        {{
            for (int i = 0; i < reader.FieldCount; i++)
            {{
                var name = reader.GetName(i);
                var type = reader.GetFieldType(i);
                switch (EntitiesGenerator.NormalizedHash(name))
                {{
                    {f}
                    default:
                        break;
                }}
            }}
        }}

        {namedType.DeclaredAccessibility.ToDisplayString()} static {fullName} ReadOne({(namedType.DeclaredAccessibility == Accessibility.Public ? "this " : "")}IDataReader reader, ReadOnlySpan<int> ss)
        {{
            var d = new {fullName}();
            for (int j = 0; j < ss.Length; j++)
            {{
                switch (ss[j])
                {{
                    {s}
                    default:
                        break;
                }}
            }}
            return d;
        }}

        {namedType.DeclaredAccessibility.ToDisplayString()} static IEnumerable<{fullName}> Read({(namedType.DeclaredAccessibility == Accessibility.Public ? "this " : "")}IDataReader reader)
        {{
            var state = new ReaderState();
            state.Reader = reader;
            var s = reader.FieldCount <= 64 ? MemoryMarshal.CreateSpan(ref MemoryMarshal.GetReference(stackalloc int[reader.FieldCount]), reader.FieldCount) :  state.GetTokens();
            GenerateReadTokens(reader, s);
            ReadOnlySpan<int> readOnlyTokens = s;
            List<{fullName}> results = new();
            try
            {{
                while (reader.Read())
                {{
                    results.Add(ReadOne(reader, readOnlyTokens));
                }}
                return results;
            }}
            finally
            {{ 
                state.Dispose();
            }}
        }}
"; 
        }

        private static void GenerateEnableFunc(GeneratorExecutionContext context, StringBuilder cList)
        {
            var generatorSrc = $@"
// <auto-generated/>
#pragma warning disable 8019 //disable 'unnecessary using directive' warning
using System;
using System.Data;
using SlowestEM;
using System.Runtime.CompilerServices;
using System.ComponentModel;

namespace SlowestEM
{{
    public static partial class EntitiesGenerator
    {{
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static string ReadToString(this IDataReader reader, int i)
        {{
            return reader.GetString(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static string ReadToStringConvert(this IDataReader reader, int i)
        {{
            return reader.GetValue(i)?.ToString();
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short ReadToInt16(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return reader.GetInt16(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short ReadToInt16Convert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToInt16(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short? ReadToInt16Nullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return reader.GetInt16(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short? ReadToInt16NullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToInt16(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort ReadToUInt16(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return (UInt16)reader.GetValue(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort ReadToUInt16Convert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToUInt16(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort? ReadToUInt16Nullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return (UInt16)reader.GetValue(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort? ReadToUInt16NullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToUInt16(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ReadToInt32(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return reader.GetInt32(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ReadToInt32Convert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToInt32(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int? ReadToInt32Nullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return reader.GetInt32(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int? ReadToInt32NullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToInt32(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint ReadToUInt32(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return (uint)reader.GetValue(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint ReadToUInt32Convert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToUInt32(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint? ReadToUInt32Nullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return (uint)reader.GetValue(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint? ReadToUInt32NullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToUInt32(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long ReadToInt64(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return reader.GetInt64(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long ReadToInt64Convert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToInt64(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long? ReadToInt64Nullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return reader.GetInt64(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long? ReadToInt64NullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToInt64(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong ReadToUInt64(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return (ulong)reader.GetValue(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong ReadToUInt64Convert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToUInt64(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong? ReadToUInt64Nullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return (ulong)reader.GetValue(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong? ReadToUInt64NullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToUInt64(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float ReadToFloat(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return reader.GetFloat(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float ReadToFloatConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToSingle(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float? ReadToFloatNullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return reader.GetFloat(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float? ReadToFloatNullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToSingle(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double ReadToDouble(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return reader.GetDouble(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double ReadToDoubleConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToDouble(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double? ReadToDoubleNullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return reader.GetDouble(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double? ReadToDoubleNullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToDouble(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static decimal ReadToDecimal(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return reader.GetDecimal(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static decimal ReadToDecimalConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToDecimal(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static decimal? ReadToDecimalNullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return reader.GetDecimal(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static decimal? ReadToDecimalNullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToDecimal(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool ReadToBoolean(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return reader.GetBoolean(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool ReadToBooleanConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToBoolean(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool? ReadToBooleanNullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return reader.GetBoolean(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool? ReadToBooleanNullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToBoolean(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static char ReadToChar(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return reader.GetChar(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static char ReadToCharConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToChar(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static char? ReadToCharNullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return reader.GetChar(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static char? ReadToCharNullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToChar(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte ReadToByte(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return reader.GetByte(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte ReadToByteConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToByte(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte? ReadToByteNullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return reader.GetByte(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte? ReadToByteNullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToByte(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static DateTime ReadToDateTime(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return reader.GetDateTime(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static DateTime ReadToDateTimeConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return default;
            else return Convert.ToDateTime(reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static DateTime? ReadToDateTimeNullable(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return reader.GetDateTime(i);
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static DateTime? ReadToDateTimeNullableConvert(this IDataReader reader, int i)
        {{
            if (reader.IsDBNull(i)) return null;
            else return Convert.ToDateTime(reader.GetValue(i));
        }}
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static T ReadToEnumString<T>(this IDataReader reader, int i) where T : struct
        {{
            if (reader.IsDBNull(i)) return default;
            else return Enum.Parse<T>(reader.GetString(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static T ReadToEnum<T>(this IDataReader reader, int i) where T : struct
        {{
            if (reader.IsDBNull(i)) return default;
            else return (T)Enum.ToObject(typeof(T), reader.GetValue(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static T? ReadToEnumStringNullable<T>(this IDataReader reader, int i) where T : struct
        {{
            if (reader.IsDBNull(i)) return null;
            else return Enum.Parse<T>(reader.GetString(i));
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static T? ReadToEnumNullable<T>(this IDataReader reader, int i) where T : struct
        {{
            if (reader.IsDBNull(i)) return null;
            else return (T)Enum.ToObject(typeof(T), reader.GetValue(i));
        }}

        // param
        private static readonly object[] s_BoxedInt32 = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
        private static readonly object s_BoxedTrue = true, s_BoxedFalse = false;


        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static object AsValue(int value)
            => value >= -1 && value <= 10 ? s_BoxedInt32[value + 1] : value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static object AsValue(int? value)
            => value.HasValue ? AsValue(value.GetValueOrDefault()) : DBNull.Value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static object AsValue(bool value)
            => value ? s_BoxedTrue : s_BoxedFalse;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static object AsValue(bool? value)
            => value.HasValue ? (value.GetValueOrDefault() ? s_BoxedTrue : s_BoxedFalse) : DBNull.Value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static object AsValue<T>(T? value) where T : struct
            => value.HasValue ? AsValue(value.GetValueOrDefault()) : DBNull.Value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static object AsValue(object? value)
            => value ?? DBNull.Value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static object AsGenericValue<T>(T value)
        {{
            // note JIT elide here
            if (typeof(T) == typeof(bool)) return AsValue(Unsafe.As<T, bool>(ref value));
            if (typeof(T) == typeof(bool?)) return AsValue(Unsafe.As<T, bool?>(ref value));
            if (typeof(T) == typeof(int)) return AsValue(Unsafe.As<T, int>(ref value));
            if (typeof(T) == typeof(int?)) return AsValue(Unsafe.As<T, int?>(ref value));
            return AsValue((object?)value);
        }}

        public static uint NormalizedHash(string value)
        {{
            uint hash = 0;
            if (!string.IsNullOrEmpty(value))
            {{   // borrowed from Roslyn's switch on string implementation
                hash = 2166136261u;
                foreach (char c in value)
                {{
                    if (c == '_' || char.IsWhiteSpace(c)) continue;
                    hash = (char.ToLower(c) ^ hash) * 16777619;
                }}
            }}
            return hash;
        }}

        [ModuleInitializer]
        internal static void Enable()
        {{
            {cList}
        }}
    }}
}}
";

            context.AddSource($"SlowestEM.Generator.EntitiesGenerator.g.cs", generatorSrc);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new FindClassReceiver());
        }
    }
}
