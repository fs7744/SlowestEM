using Microsoft.CodeAnalysis;
using System.Text;

namespace SlowestEM.Generator
{
    [Generator]
    public class ReaderToEntitySourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var finder = context.SyntaxContextReceiver as FindClassReceiver;
            var cList = new StringBuilder();
            foreach (var namedType in finder.AllClass(context))
            {
                    cList.AppendLine($"// {namedType.ToDisplayString()}");
                    var src = $@"
// <auto-generated/>
#pragma warning disable 8019 //disable 'unnecessary using directive' warning
using System;
using System.Runtime.CompilerServices;

namespace SlowestEM.Generator
{{
    public static partial class {namedType.Name}_Accessors
    {{
        [UnsafeAccessor(UnsafeAccessorKind.Constructor)]
        public static extern {namedType.ToDisplayString()} Ctor();
    }}
}}
";
                    context.AddSource($"{namedType.ToDisplayString()}.g.cs", src);
            }

            var generatorSrc = $@"
// <auto-generated/>
#pragma warning disable 8019 //disable 'unnecessary using directive' warning
using System;

namespace SlowestEM.Generator
{{
    public static partial class EntitiesGenerator
    {{
        public static void Enable()
        {{
            {cList}
        }}
    }}
}}
";

            context.AddSource($"SlowestEM.Generator.EntitiesGenerator.g.cs", generatorSrc);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new FindClassReceiver());
        }
    }
}
